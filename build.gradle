buildscript {
	repositories {
		jcenter()
		mavenLocal()
	}
	dependencies {
		classpath "com.marklogic:marklogic-unit-test-client:1.0.0"
        if (project.hasProperty("mlDHFVersion") && project.property("mlDHFVersion").compareToIgnoreCase("5.2.0") <= 0) {
          classpath "gradle.plugin.com.marklogic:ml-data-hub:${mlDHFVersion}"
        } else if (project.hasProperty("mlDHFVersion")) {
          classpath "com.marklogic:ml-data-hub:${mlDHFVersion}"
        } else {
          classpath "com.marklogic:ml-data-hub:5.+"
        }
    }
}



plugins {
  // Gradle Properties plugin
  id 'net.saliman.properties' version '1.4.6'

  // Data services
  id 'com.marklogic.ml-development-tools' version '4.2.0'

  id 'java'
}

apply plugin: "com.marklogic.ml-data-hub"

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()

  // Needed for some mlcp dependencies, such as commons-csv:1.5.1-marklogic
  maven { url "http://developer.marklogic.com/maven2/" }
}

configurations {
  mlcp
}

test {
	useJUnitPlatform()
}

dependencies {
  mlcp "com.marklogic:mlcp:9.0.11"

  /**
  * mlcp uses Log4j for logging, and if Log4j can't find a configuration file, it will complain and you'll
  * get none of mlcp's usually-useful logging. It is recommended then that your Gradle configuration for
  * mlcp include a directory or some other resource that provides a log4j.properties file.
  */
  mlcp files("lib")

  compile group: 'com.marklogic', name: 'marklogic-client-api', version: '4.2.0'

  compile group: 'org.json', name: 'json', version: '20200518'

  mlBundle "com.marklogic:marklogic-unit-test-modules:1.0.0"

	testCompile "com.marklogic:marklogic-junit5:1.0.0"

	testRuntime "org.junit.jupiter:junit-jupiter-engine:5.6.2"

	// Forcing Spring to use logback instead of commons-logging
	testRuntime "ch.qos.logback:logback-classic:1.1.8"
	testRuntime group: "org.slf4j", name: "jcl-over-slf4j", version: "1.7.22"
	testRuntime group: "org.slf4j", name: "slf4j-api", version: "1.7.22"
}

/**
 * Loads sample JSON data to a database. Change the "port" to be "mlStagingPort" to load to staging instead.
 * For a data hub, you would also typically invoke an ingest step of a flow to put the data in an envelope.
 *
 * transform_module = "/data-hub/5/transforms/mlcp-flow-transform.sjs"
 * transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
 * transform_param = "flow-name=<my flow name>,step=<my ingest step number>"
 */
task loadMoviesJson(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"

  host = mlHost
  port = mlFinalPort.toInteger()
  ssl = sslFlag.toBoolean()
  username = mlUsername
  password = mlPassword
  restrict_hosts = mlIsProvisionedEnvironment // DHS uses a loadbalancer

  input_file_path = "data/movies-json"
  input_file_type = "documents"
  document_type = "json"

  output_collections = "movies-json"

  // URI will be relative to the data/ directory
  output_uri_replace = ".*/data,''"
  //output_uri_prefix = ""
  //output_uri_suffix = ""
  output_permissions = "endpointUser,read,endpointUser,update"
}

/**
 * Loads sample XML data to a database. Change the "port" to be "mlStagingPort" to load to staging instead.
 * For a data hub, you would also typically invoke an ingest step of a flow to put the data in an envelope.
 *
 * transform_module = "/data-hub/5/transforms/mlcp-flow-transform.sjs"
 * transform_namespace = "http://marklogic.com/data-hub/mlcp-flow-transform"
 * transform_param = "flow-name=<my flow name>,step=<my ingest step number>"
 */
task loadMoviesXml(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "IMPORT"

  host = mlHost
  port = mlFinalPort.toInteger()
  ssl = sslFlag.toBoolean()
  username = mlUsername
  password = mlPassword
  restrict_hosts = mlIsProvisionedEnvironment // DHS uses a loadbalancer

  input_file_path = "data/movies-xml"
  input_file_type = "documents"
  document_type = "xml"

  output_collections = "movies-xml"
  // URI will be relative to the data/ directory
  output_uri_replace = ".*/data,''"
  //output_uri_prefix = ""
  //output_uri_suffix = ""
  output_permissions = "endpointUser,read,endpointUser,update"
}

task exportMoviesArchive(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "EXPORT"

  port = mlFinalPort.toInteger()
  ssl = sslFlag.toBoolean()
  username = mlUsername
  password = mlPassword
  restrict_hosts = mlIsProvisionedEnvironment // DHS uses a loadbalancer

  output_file_path = "data/export"
  output_type = "archive"
}

task exportMoviesXml(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "EXPORT"

  port = mlFinalPort.toInteger()
  ssl = sslFlag.toBoolean()
  username = mlUsername
  password = mlPassword
  restrict_hosts = mlIsProvisionedEnvironment // DHS uses a loadbalancer

  output_file_path = "data/export"
}

/**
 * Copy one or more collections from a source database to your database. Source
 * parameters (use -P or put in a properties file):
 *   sourceCollections=collection1,collection2
 *   sourceHost=hostname of source cluster
 *   sourcePort=port on the source cluster
 *   sourceUsername=username on the source cluster
 *   sourcePassword=password for user on the source cluster
 *
 * The output parameters are set based on the gradle properties file specified. See
 * https://docs.marklogic.com/guide/mlcp/copy#chapter for more details about the MLCP
 * copy command.
 */
task copyCollections(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "COPY"

  doFirst {
    collection_filter = sourceCollections

    // set to false if you are copying docs with roles that are different than the destination
    copy_permissions = false

    // if not copying from source, set the permissions you want on the documents in the destination
    output_permissions = "endpointUser,read,endpointUser,update"

    input_host = sourceHost
    input_port = sourcePort.toInteger()
    input_ssl = false
    input_username = sourceUsername
    input_password = sourcePassword
    restrict_input_hosts = false
  }

  output_host = mlHost
  output_port = mlFinalPort.toInteger()
  output_ssl = sslFlag.toBoolean()
  output_username = mlUsername
  output_password = mlPassword
  restrict_output_hosts = mlIsProvisionedEnvironment // DHS uses a loadbalancer

  thread_count = 4 // default threads
}

task copyCollectionsFromDHS(type: com.marklogic.gradle.task.MlcpTask) {
  classpath = configurations.mlcp
  command = "COPY"

  doFirst {
    collection_filter = sourceCollections

    // set to false if you are copying docs with roles that are different than the destination
    copy_permissions = true

    // if not copying from source, set the permissions you want on the documents in the destination
    //output_permissions = "endpointUser,read,endpointUser,update"

    input_host = sourceHost
    input_port = sourcePort.toInteger()
    input_ssl = true
    input_username = sourceUsername
    input_password = sourcePassword
    restrict_input_hosts = true
  }

  output_host = mlHost
  output_port = mlFinalPort.toInteger()
  output_ssl = sslFlag.toBoolean()
  output_username = mlUsername
  output_password = mlPassword
  restrict_output_hosts = mlIsProvisionedEnvironment // DHS uses a loadbalancer

  thread_count = 4 // default threads
}


task generateMovieSearchProxies(type: com.marklogic.client.tools.gradle.EndpointProxiesGenTask) {
	serviceDeclarationFile = 'src/main/ml-modules/root/ds/movies/service.json'
}

task runMovieSearchService(type: JavaExec) {
  doFirst {
    args = [
      "--host", mlHost,
      "--port", mlFinalPort,
      "--username", mlUsername,
      "--password", mlPassword,
      "--dhs", mlIsProvisionedEnvironment,
      searchString
    ]
  }

  group = "Execution"
  description = "Run a search against the movie search service"
  classpath = sourceSets.main.runtimeClasspath
  main = "com.marklogic.hubstarter.client.MovieServiceClient"
}

task runMovieSearch(type: JavaExec) {
  doFirst {
    args = [
      "--host", mlHost,
      "--port", mlFinalPort,
      "--username", mlUsername,
      "--password", mlPassword,
      "--dhs", mlIsProvisionedEnvironment,
      "--searchOptions", "movies",  // see src/main/ml-modules/options/movies.xml
      searchString
    ]
  }

  group = "Execution"
  description = "Run a search against the search API using the movies search options"
  classpath = sourceSets.main.runtimeClasspath
  main = "com.marklogic.hubstarter.client.SearchClient"
}

task runMovieCtsSearch(type: JavaExec) {
  doFirst {
    args = [
      "--host", mlHost,
      "--port", mlFinalPort,
      "--username", mlUsername,
      "--password", mlPassword,
      "--dhs", mlIsProvisionedEnvironment,
      "--searchOptions", "movies",  // see src/main/ml-modules/options/movies.xml
      searchString
    ]
  }

  group = "Execution"
  description = "Run a search against the search API using the movies search options"
  classpath = sourceSets.main.runtimeClasspath
  main = "com.marklogic.hubstarter.clientSearchClient"
}
